// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.28.2
// source: ludotheque.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ludotheque";

export interface GameListPaginationDTO {
  page: number;
  totalPages: number;
  count: number;
  previous: string;
  next: string;
  games: GameDTO[];
}

export interface GameDTO {
  id: string;
  name: string;
  description: string;
  isRented: boolean;
  isActive: boolean;
  timeOfCreation: TimestampDTO | undefined;
  renterId: string;
  currentPrice: GamePriceDTO | undefined;
  currentRentInformation: RentInformationDTO | undefined;
  genres: GenreDTO[];
  prices: GamePriceDTO[];
  rentInformations: RentInformationDTO[];
}

export interface GamePriceDTO {
  id: string;
  gameId: string;
  price: number;
  timeOfPriceSet: TimestampDTO | undefined;
}

export interface RentInformationDTO {
  id: string;
  daysRented: number;
  priceAtRentTime: GamePriceDTO | undefined;
  maxRentDaysAtRentTime: number;
  gameId: string;
  userId: string;
  timestampOfRent: TimestampDTO | undefined;
  timestampOfReturn: TimestampDTO | undefined;
}

export interface UserDTO {
  id: string;
  username: string;
  givenName: string;
  familyName: string;
  mail: string;
  isActive: boolean;
}

export interface TimestampDTO {
  seconds: number;
  nanos: number;
  timezone: string;
}

export interface RentGameDto {
  userId: string;
  gameId: string;
}

export interface GenreDTO {
  id: string;
  name: string;
  games: GameDTO[];
}

export interface Empty {
}

function createBaseGameListPaginationDTO(): GameListPaginationDTO {
  return { page: 0, totalPages: 0, count: 0, previous: "", next: "", games: [] };
}

export const GameListPaginationDTO: MessageFns<GameListPaginationDTO> = {
  encode(message: GameListPaginationDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(16).int32(message.totalPages);
    }
    if (message.count !== 0) {
      writer.uint32(24).int64(message.count);
    }
    if (message.previous !== "") {
      writer.uint32(34).string(message.previous);
    }
    if (message.next !== "") {
      writer.uint32(42).string(message.next);
    }
    for (const v of message.games) {
      GameDTO.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameListPaginationDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameListPaginationDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.count = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.previous = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.next = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.games.push(GameDTO.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameListPaginationDTO {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      previous: isSet(object.previous) ? globalThis.String(object.previous) : "",
      next: isSet(object.next) ? globalThis.String(object.next) : "",
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => GameDTO.fromJSON(e)) : [],
    };
  },

  toJSON(message: GameListPaginationDTO): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.previous !== "") {
      obj.previous = message.previous;
    }
    if (message.next !== "") {
      obj.next = message.next;
    }
    if (message.games?.length) {
      obj.games = message.games.map((e) => GameDTO.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameListPaginationDTO>, I>>(base?: I): GameListPaginationDTO {
    return GameListPaginationDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameListPaginationDTO>, I>>(object: I): GameListPaginationDTO {
    const message = createBaseGameListPaginationDTO();
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.count = object.count ?? 0;
    message.previous = object.previous ?? "";
    message.next = object.next ?? "";
    message.games = object.games?.map((e) => GameDTO.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGameDTO(): GameDTO {
  return {
    id: "",
    name: "",
    description: "",
    isRented: false,
    isActive: false,
    timeOfCreation: undefined,
    renterId: "",
    currentPrice: undefined,
    currentRentInformation: undefined,
    genres: [],
    prices: [],
    rentInformations: [],
  };
}

export const GameDTO: MessageFns<GameDTO> = {
  encode(message: GameDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.isRented !== false) {
      writer.uint32(32).bool(message.isRented);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.timeOfCreation !== undefined) {
      TimestampDTO.encode(message.timeOfCreation, writer.uint32(50).fork()).join();
    }
    if (message.renterId !== "") {
      writer.uint32(58).string(message.renterId);
    }
    if (message.currentPrice !== undefined) {
      GamePriceDTO.encode(message.currentPrice, writer.uint32(66).fork()).join();
    }
    if (message.currentRentInformation !== undefined) {
      RentInformationDTO.encode(message.currentRentInformation, writer.uint32(74).fork()).join();
    }
    for (const v of message.genres) {
      GenreDTO.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.prices) {
      GamePriceDTO.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.rentInformations) {
      RentInformationDTO.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isRented = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timeOfCreation = TimestampDTO.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.renterId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.currentPrice = GamePriceDTO.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.currentRentInformation = RentInformationDTO.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.genres.push(GenreDTO.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.prices.push(GamePriceDTO.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.rentInformations.push(RentInformationDTO.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isRented: isSet(object.isRented) ? globalThis.Boolean(object.isRented) : false,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      timeOfCreation: isSet(object.timeOfCreation) ? TimestampDTO.fromJSON(object.timeOfCreation) : undefined,
      renterId: isSet(object.renterId) ? globalThis.String(object.renterId) : "",
      currentPrice: isSet(object.currentPrice) ? GamePriceDTO.fromJSON(object.currentPrice) : undefined,
      currentRentInformation: isSet(object.currentRentInformation)
        ? RentInformationDTO.fromJSON(object.currentRentInformation)
        : undefined,
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => GenreDTO.fromJSON(e)) : [],
      prices: globalThis.Array.isArray(object?.prices) ? object.prices.map((e: any) => GamePriceDTO.fromJSON(e)) : [],
      rentInformations: globalThis.Array.isArray(object?.rentInformations)
        ? object.rentInformations.map((e: any) => RentInformationDTO.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GameDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isRented !== false) {
      obj.isRented = message.isRented;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.timeOfCreation !== undefined) {
      obj.timeOfCreation = TimestampDTO.toJSON(message.timeOfCreation);
    }
    if (message.renterId !== "") {
      obj.renterId = message.renterId;
    }
    if (message.currentPrice !== undefined) {
      obj.currentPrice = GamePriceDTO.toJSON(message.currentPrice);
    }
    if (message.currentRentInformation !== undefined) {
      obj.currentRentInformation = RentInformationDTO.toJSON(message.currentRentInformation);
    }
    if (message.genres?.length) {
      obj.genres = message.genres.map((e) => GenreDTO.toJSON(e));
    }
    if (message.prices?.length) {
      obj.prices = message.prices.map((e) => GamePriceDTO.toJSON(e));
    }
    if (message.rentInformations?.length) {
      obj.rentInformations = message.rentInformations.map((e) => RentInformationDTO.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameDTO>, I>>(base?: I): GameDTO {
    return GameDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameDTO>, I>>(object: I): GameDTO {
    const message = createBaseGameDTO();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.isRented = object.isRented ?? false;
    message.isActive = object.isActive ?? false;
    message.timeOfCreation = (object.timeOfCreation !== undefined && object.timeOfCreation !== null)
      ? TimestampDTO.fromPartial(object.timeOfCreation)
      : undefined;
    message.renterId = object.renterId ?? "";
    message.currentPrice = (object.currentPrice !== undefined && object.currentPrice !== null)
      ? GamePriceDTO.fromPartial(object.currentPrice)
      : undefined;
    message.currentRentInformation =
      (object.currentRentInformation !== undefined && object.currentRentInformation !== null)
        ? RentInformationDTO.fromPartial(object.currentRentInformation)
        : undefined;
    message.genres = object.genres?.map((e) => GenreDTO.fromPartial(e)) || [];
    message.prices = object.prices?.map((e) => GamePriceDTO.fromPartial(e)) || [];
    message.rentInformations = object.rentInformations?.map((e) => RentInformationDTO.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGamePriceDTO(): GamePriceDTO {
  return { id: "", gameId: "", price: 0, timeOfPriceSet: undefined };
}

export const GamePriceDTO: MessageFns<GamePriceDTO> = {
  encode(message: GamePriceDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.price !== 0) {
      writer.uint32(29).float(message.price);
    }
    if (message.timeOfPriceSet !== undefined) {
      TimestampDTO.encode(message.timeOfPriceSet, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GamePriceDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGamePriceDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.price = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timeOfPriceSet = TimestampDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GamePriceDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      timeOfPriceSet: isSet(object.timeOfPriceSet) ? TimestampDTO.fromJSON(object.timeOfPriceSet) : undefined,
    };
  },

  toJSON(message: GamePriceDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.timeOfPriceSet !== undefined) {
      obj.timeOfPriceSet = TimestampDTO.toJSON(message.timeOfPriceSet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GamePriceDTO>, I>>(base?: I): GamePriceDTO {
    return GamePriceDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GamePriceDTO>, I>>(object: I): GamePriceDTO {
    const message = createBaseGamePriceDTO();
    message.id = object.id ?? "";
    message.gameId = object.gameId ?? "";
    message.price = object.price ?? 0;
    message.timeOfPriceSet = (object.timeOfPriceSet !== undefined && object.timeOfPriceSet !== null)
      ? TimestampDTO.fromPartial(object.timeOfPriceSet)
      : undefined;
    return message;
  },
};

function createBaseRentInformationDTO(): RentInformationDTO {
  return {
    id: "",
    daysRented: 0,
    priceAtRentTime: undefined,
    maxRentDaysAtRentTime: 0,
    gameId: "",
    userId: "",
    timestampOfRent: undefined,
    timestampOfReturn: undefined,
  };
}

export const RentInformationDTO: MessageFns<RentInformationDTO> = {
  encode(message: RentInformationDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.daysRented !== 0) {
      writer.uint32(16).int32(message.daysRented);
    }
    if (message.priceAtRentTime !== undefined) {
      GamePriceDTO.encode(message.priceAtRentTime, writer.uint32(26).fork()).join();
    }
    if (message.maxRentDaysAtRentTime !== 0) {
      writer.uint32(32).int32(message.maxRentDaysAtRentTime);
    }
    if (message.gameId !== "") {
      writer.uint32(42).string(message.gameId);
    }
    if (message.userId !== "") {
      writer.uint32(50).string(message.userId);
    }
    if (message.timestampOfRent !== undefined) {
      TimestampDTO.encode(message.timestampOfRent, writer.uint32(58).fork()).join();
    }
    if (message.timestampOfReturn !== undefined) {
      TimestampDTO.encode(message.timestampOfReturn, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RentInformationDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRentInformationDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.daysRented = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.priceAtRentTime = GamePriceDTO.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxRentDaysAtRentTime = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.timestampOfRent = TimestampDTO.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.timestampOfReturn = TimestampDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RentInformationDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      daysRented: isSet(object.daysRented) ? globalThis.Number(object.daysRented) : 0,
      priceAtRentTime: isSet(object.priceAtRentTime) ? GamePriceDTO.fromJSON(object.priceAtRentTime) : undefined,
      maxRentDaysAtRentTime: isSet(object.maxRentDaysAtRentTime) ? globalThis.Number(object.maxRentDaysAtRentTime) : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      timestampOfRent: isSet(object.timestampOfRent) ? TimestampDTO.fromJSON(object.timestampOfRent) : undefined,
      timestampOfReturn: isSet(object.timestampOfReturn) ? TimestampDTO.fromJSON(object.timestampOfReturn) : undefined,
    };
  },

  toJSON(message: RentInformationDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.daysRented !== 0) {
      obj.daysRented = Math.round(message.daysRented);
    }
    if (message.priceAtRentTime !== undefined) {
      obj.priceAtRentTime = GamePriceDTO.toJSON(message.priceAtRentTime);
    }
    if (message.maxRentDaysAtRentTime !== 0) {
      obj.maxRentDaysAtRentTime = Math.round(message.maxRentDaysAtRentTime);
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.timestampOfRent !== undefined) {
      obj.timestampOfRent = TimestampDTO.toJSON(message.timestampOfRent);
    }
    if (message.timestampOfReturn !== undefined) {
      obj.timestampOfReturn = TimestampDTO.toJSON(message.timestampOfReturn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RentInformationDTO>, I>>(base?: I): RentInformationDTO {
    return RentInformationDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RentInformationDTO>, I>>(object: I): RentInformationDTO {
    const message = createBaseRentInformationDTO();
    message.id = object.id ?? "";
    message.daysRented = object.daysRented ?? 0;
    message.priceAtRentTime = (object.priceAtRentTime !== undefined && object.priceAtRentTime !== null)
      ? GamePriceDTO.fromPartial(object.priceAtRentTime)
      : undefined;
    message.maxRentDaysAtRentTime = object.maxRentDaysAtRentTime ?? 0;
    message.gameId = object.gameId ?? "";
    message.userId = object.userId ?? "";
    message.timestampOfRent = (object.timestampOfRent !== undefined && object.timestampOfRent !== null)
      ? TimestampDTO.fromPartial(object.timestampOfRent)
      : undefined;
    message.timestampOfReturn = (object.timestampOfReturn !== undefined && object.timestampOfReturn !== null)
      ? TimestampDTO.fromPartial(object.timestampOfReturn)
      : undefined;
    return message;
  },
};

function createBaseUserDTO(): UserDTO {
  return { id: "", username: "", givenName: "", familyName: "", mail: "", isActive: false };
}

export const UserDTO: MessageFns<UserDTO> = {
  encode(message: UserDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.givenName !== "") {
      writer.uint32(26).string(message.givenName);
    }
    if (message.familyName !== "") {
      writer.uint32(34).string(message.familyName);
    }
    if (message.mail !== "") {
      writer.uint32(42).string(message.mail);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.givenName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.familyName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mail = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      givenName: isSet(object.givenName) ? globalThis.String(object.givenName) : "",
      familyName: isSet(object.familyName) ? globalThis.String(object.familyName) : "",
      mail: isSet(object.mail) ? globalThis.String(object.mail) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
    };
  },

  toJSON(message: UserDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.givenName !== "") {
      obj.givenName = message.givenName;
    }
    if (message.familyName !== "") {
      obj.familyName = message.familyName;
    }
    if (message.mail !== "") {
      obj.mail = message.mail;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDTO>, I>>(base?: I): UserDTO {
    return UserDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDTO>, I>>(object: I): UserDTO {
    const message = createBaseUserDTO();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.givenName = object.givenName ?? "";
    message.familyName = object.familyName ?? "";
    message.mail = object.mail ?? "";
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseTimestampDTO(): TimestampDTO {
  return { seconds: 0, nanos: 0, timezone: "" };
}

export const TimestampDTO: MessageFns<TimestampDTO> = {
  encode(message: TimestampDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds !== 0) {
      writer.uint32(8).int64(message.seconds);
    }
    if (message.nanos !== 0) {
      writer.uint32(16).int64(message.nanos);
    }
    if (message.timezone !== "") {
      writer.uint32(26).string(message.timezone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimestampDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimestampDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nanos = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timezone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimestampDTO {
    return {
      seconds: isSet(object.seconds) ? globalThis.Number(object.seconds) : 0,
      nanos: isSet(object.nanos) ? globalThis.Number(object.nanos) : 0,
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : "",
    };
  },

  toJSON(message: TimestampDTO): unknown {
    const obj: any = {};
    if (message.seconds !== 0) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.nanos !== 0) {
      obj.nanos = Math.round(message.nanos);
    }
    if (message.timezone !== "") {
      obj.timezone = message.timezone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimestampDTO>, I>>(base?: I): TimestampDTO {
    return TimestampDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimestampDTO>, I>>(object: I): TimestampDTO {
    const message = createBaseTimestampDTO();
    message.seconds = object.seconds ?? 0;
    message.nanos = object.nanos ?? 0;
    message.timezone = object.timezone ?? "";
    return message;
  },
};

function createBaseRentGameDto(): RentGameDto {
  return { userId: "", gameId: "" };
}

export const RentGameDto: MessageFns<RentGameDto> = {
  encode(message: RentGameDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RentGameDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRentGameDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RentGameDto {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
    };
  },

  toJSON(message: RentGameDto): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RentGameDto>, I>>(base?: I): RentGameDto {
    return RentGameDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RentGameDto>, I>>(object: I): RentGameDto {
    const message = createBaseRentGameDto();
    message.userId = object.userId ?? "";
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseGenreDTO(): GenreDTO {
  return { id: "", name: "", games: [] };
}

export const GenreDTO: MessageFns<GenreDTO> = {
  encode(message: GenreDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.games) {
      GameDTO.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenreDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenreDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.games.push(GameDTO.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenreDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => GameDTO.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenreDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.games?.length) {
      obj.games = message.games.map((e) => GameDTO.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenreDTO>, I>>(base?: I): GenreDTO {
    return GenreDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenreDTO>, I>>(object: I): GenreDTO {
    const message = createBaseGenreDTO();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.games = object.games?.map((e) => GameDTO.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
